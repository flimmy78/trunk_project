--- a/drivers/tty/serial/autelan_uart1.c
+++ b/drivers/tty/serial/autelan_uart1.c
@@ -0,0 +1,356 @@
+/*
+ *    AUTELAN/UART1 Driver - tty functions.
+ *
+ *  Author(s):
+ *    Original 3270 Code for 2.4 written by Richard Hitt (UTS Global)
+ *    Rewritten for 2.5 by Martin Schwidefsky <schwidefsky@de.ibm.com>
+ *	-- Copyright IBM Corp. 2003
+ */
+
+#include <linux/module.h>
+#include <linux/kernel.h>
+#include <asm/byteorder.h>
+#include <linux/init.h>
+#include <linux/errno.h>
+#include <linux/delay.h>
+#include <linux/timer.h>
+#include <linux/interrupt.h>
+#include <linux/dma-mapping.h>
+#include <linux/bitops.h>
+#include <asm/irq.h>
+#include <asm/io.h>
+#include <linux/platform_device.h>
+#include <linux/serial_core.h>
+#include <linux/console.h>
+#include <linux/tty_flip.h>
+
+#include "autelan_uart1.h"
+
+typedef struct {
+	struct tty_driver	*tty;
+    struct tty_port port;
+	char			buf[1024];
+	unsigned 		put,
+				get;
+} ath_hs_uart_softc_t;
+
+ath_hs_uart_softc_t	ath_hs_uart_softc;
+
+static struct tty_port_operations null_ops = { };
+
+
+void ath_hs_uart_init(void)
+{
+	u_int32_t data, serial_clk, clk_step, clk_scale;
+
+	/*
+	 * Formula to calculate clk_step and clk_scale
+	 * temp = (((long)serial_clk)*1310)/131072;
+	 * clk_scale = (temp / (baud_rate));
+	 * temp = (131072*((long)baud_rate));
+	 * clk_step = (temp / (serial_clk)) * (clk_scale + 1);
+	 */
+
+	// UART1 Out of Reset
+	ath_reg_wr(ATH_RESET,
+		ath_reg_rd(ATH_RESET) & ~RST_RESET_UART1_RESET_MASK);
+
+	// Set UART to operate on 100 MHz
+	ath_reg_rmw_set(SWITCH_CLOCK_SPARE_ADDRESS,
+		SWITCH_CLOCK_SPARE_UART1_CLK_SEL_SET(1));
+
+	serial_clk = 100 * 1000 * 1000;
+
+	//clk_scale = ((serial_clk / 128k) * 1310) / baudrate
+	clk_scale = ((serial_clk >> 17) * 1310) / ATH_HS_UART_BAUD;
+
+	//clk_step = ((128k * 115200 * (clk_scale + 1)) / serial_clk)
+	// Splitting 128K as 128 * 1024
+	clk_step = ((128 * (ATH_HS_UART_BAUD / 100) * (clk_scale + 1)) << 10)
+			/ (serial_clk / 100);
+    
+	ath_reg_wr(ATH_HS_UART_INT_EN, 0x1);
+    
+	// GPIO Settings for HS_UART
+	// Enabling UART1_TD as output on GPIO16
+	data = ath_reg_rd(ATH_GPIO_OUT_FUNCTION4);
+	data = (data & ~0x000000ff) | 0x4f;  //Autelan-Added: chenxf modified for GPS 2014-09-13 
+										 //0x4f = 79 means uart1_td func
+	ath_reg_wr(ATH_GPIO_OUT_FUNCTION4, data);
+
+	// Enabling UART1_TD as outputs on GPIO16
+	data = ath_reg_rd(ATH_GPIO_OE);
+	data = (data & 0xfffeffff) | 0xa00; //Autelan-Added: chenxf modified for GPS 2014-09-13
+	ath_reg_wr(ATH_GPIO_OE, data);
+
+	//Autelan-Added: chenxf modified for GPS 2014-09-13
+	// Enabling UART1_RD as inputs on GPIO 15 
+	data = ath_reg_rd(ATH_GPIO_OE);
+	data = data | 0x00008000; 
+	ath_reg_wr(ATH_GPIO_OE, data);
+
+	// GPIO_IN_ENABLE9 on GPIO 15
+	ath_reg_wr(ATH_GPIO_IN_ENABLE9, 0x000f0000); //Autelan-Added: chenxf modified for GPS 2014-09-13
+
+	// CLOCK Settings
+	data = ath_reg_rd(ATH_HS_UART_CLK);
+	data = (data & 0xff000000) | clk_step | (clk_scale << 16);
+	ath_reg_wr(ATH_HS_UART_CLK, data);
+
+	ath_reg_wr(ATH_HS_UART_CS, 0x2188);
+
+	//ath_sys_frequency();
+	//printk("step 0x%x scale 0x%x\n", clk_step, clk_scale);
+}
+
+void ath_hs_uart_put(uint8_t byte)
+{
+	u_int32_t tx_data;
+
+#if 0
+	if (!ath_hs_uart_softc.inited) {
+		ath_hs_uart_init();
+	}
+#endif
+
+	do {
+		tx_data = ath_reg_rd(UART1_REG_ADDRESS);	// UART DATA Reg
+	} while ((tx_data & 0x200) != 0x200);
+
+	tx_data = byte | 0x200;
+	ath_reg_wr(UART1_REG_ADDRESS, tx_data);
+	//tx_data = ath_reg_rd(UART1_REG_ADDRESS);
+}
+
+uint8_t ath_hs_uart_get_poll(void)
+{
+	uint8_t ch;
+	u_int32_t rx_data;
+    
+	do {
+		rx_data = ath_reg_rd(UART1_REG_ADDRESS);	// UART DATA Reg
+	} while ((rx_data & 0x100) != 0x100);
+    
+	ch = rx_data & 0xff;
+	ath_reg_wr(UART1_REG_ADDRESS, 0x100);
+
+	return ch;
+}
+
+static int ath_hs_uart_install(struct tty_driver *driver, struct tty_struct *tty)
+{
+
+    ath_hs_uart_softc.port.low_latency = 0;
+    
+    tty_port_tty_set(&ath_hs_uart_softc.port, tty);
+    
+    tty_port_install(&ath_hs_uart_softc.port, driver, tty);
+
+    tty->driver_data = &ath_hs_uart_softc;
+    
+	return 0;
+}
+
+static int ath_hs_uart_open(struct tty_struct *tty, struct file *filp)
+{
+    //u_int32_t tpval;
+
+	if (tty->index >= tty->driver->num)
+		return -ENODEV;
+
+	enable_irq(ATH_MISC_IRQ_HS_UART); //Autelan-Added: chenxf modified for GPS 2014-09-13
+
+    return 0;
+
+}
+
+static void ath_hs_uart_close(struct tty_struct *tty, struct file *filp)
+{
+	disable_irq(ATH_MISC_IRQ_HS_UART); //Autelan-Added: chenxf modified for GPS 2014-09-13
+
+    return;
+}
+
+#define hs_get_char(sc)				\
+({						\
+	unsigned char c =			\
+	sc->buf[sc->get % sizeof(sc->buf)];	\
+	sc->get ++;				\
+	c;					\
+})
+
+#define hs_set_char(sc, c)			\
+do {						\
+	sc->buf[sc->put % sizeof(sc->buf)] = c;	\
+	sc->put ++;				\
+} while(0)
+
+static int ath_hs_uart_put_char(struct tty_struct *tty, unsigned char ch)
+{
+	ath_hs_uart_softc_t	*sc = tty->driver->driver_state;
+
+	hs_set_char(sc, ch);
+
+	return 1;
+}
+
+static int ath_hs_uart_chars_in_buffer(struct tty_struct *tty)
+{
+	ath_hs_uart_softc_t	*sc = tty->driver->driver_state;
+
+	return sc->put - sc->get;
+}
+
+static int ath_hs_uart_write_room(struct tty_struct *tty)
+{
+	ath_hs_uart_softc_t	*sc = tty->driver->driver_state;
+
+	return sizeof(sc->buf) - ath_hs_uart_chars_in_buffer(tty);
+}
+
+static void ath_hs_uart_flush_chars(struct tty_struct *tty)
+{
+	extern void UartPut(u8);
+	ath_hs_uart_softc_t	*sc = tty->driver->driver_state;
+
+	while (sc->get < sc->put) {
+		ath_hs_uart_put(hs_get_char(sc));
+	}
+	return;
+}
+
+static int
+ath_hs_uart_ioctl(struct tty_struct *tty, struct file *filp, unsigned int cmd,
+	   unsigned long arg)
+{
+	switch (cmd) {
+	case TCFLSH:
+		tty_buffer_flush(tty);
+		break;
+	case TCGETS:
+	case TCSETS:
+		// allow the default handler to take care
+		return -ENOIOCTLCMD;
+	default:
+		break;// printk("%s: cmd = 0x%x\n", __func__, cmd);
+	}
+	return 0;
+}
+
+static int ath_hs_uart_break_ctl(struct tty_struct *tty, int break_state)
+{
+	printk("%s called\n", __func__);
+	return 0;
+}
+
+static void ath_hs_uart_wait_until_sent(struct tty_struct *tty, int timeout)
+{
+	printk("%s called\n", __func__);
+	return;
+}
+
+static int ath_hs_uart_write(struct tty_struct *tty,
+			const unsigned char *buf, int count)
+{
+#if 0
+	int			i;
+	ath_hs_uart_softc_t	*sc = tty->driver->driver_state;
+
+	if (count > (i = ath_hs_uart_write_room(tty))) {
+		count = i;
+	}
+
+	for (i = 0; i < count; i++) {
+		hs_set_char(sc, buf[i]);
+	}
+
+	ath_hs_uart_flush_chars(tty);
+	tty_wakeup(tty);
+	return i;
+#else
+	return 0;
+#endif
+}
+
+static const struct tty_operations ath_hs_uart_ops = {
+    .install    = ath_hs_uart_install,
+	.open		= ath_hs_uart_open,
+	.close		= ath_hs_uart_close,
+	.write		= ath_hs_uart_write,
+	.put_char	= ath_hs_uart_put_char,
+	.flush_chars	= ath_hs_uart_flush_chars,
+	.write_room	= ath_hs_uart_write_room,
+	.chars_in_buffer= ath_hs_uart_chars_in_buffer,
+	.ioctl		= ath_hs_uart_ioctl,
+	.break_ctl	= ath_hs_uart_break_ctl,
+	.wait_until_sent= ath_hs_uart_wait_until_sent,
+};
+
+static irqreturn_t ath_hs_uart_isr(int irq, void *dev_id)
+{
+	ath_hs_uart_softc_t	*sc = dev_id;
+
+    tty_insert_flip_char(&(sc->port), ath_hs_uart_get_poll(), TTY_NORMAL);
+    tty_flip_buffer_push(&(sc->port));
+
+    ath_reg_wr(ATH_HS_UART_INT_STATUS, 0xffffffff);
+    
+	return IRQ_HANDLED;
+}
+
+static int __init ath_hs_uart_user_init(void)
+{
+	int ret = 0;
+	struct tty_driver *tty;
+
+	printk("Serial: Atheros High-Speed UART\n");
+
+	ath_hs_uart_init();
+
+	tty_port_init(&ath_hs_uart_softc.port);
+	ath_hs_uart_softc.port.ops = &null_ops;
+
+	tty = tty_alloc_driver(1,TTY_DRIVER_REAL_RAW | \
+        TTY_DRIVER_DYNAMIC_DEV | TTY_DRIVER_DYNAMIC_ALLOC);
+
+	tty->driver_name	= "Atheros hs-uart";
+	tty->num		= 1;
+	tty->name		= "ttyS";
+	tty->major		= TTY_MAJOR;
+	tty->minor_start	= 65;
+	tty->type		= TTY_DRIVER_TYPE_SERIAL;
+	tty->subtype		= SERIAL_TYPE_NORMAL;
+	tty->init_termios	= tty_std_termios;
+	tty->init_termios.c_cflag = B38400 | CS8 | CREAD | HUPCL | CLOCAL;
+	tty->init_termios.c_ispeed = tty->init_termios.c_ospeed = ATH_HS_UART_BAUD;
+	tty->driver_state	= &ath_hs_uart_softc;
+
+	tty_set_operations(tty, &ath_hs_uart_ops);
+
+	ret = tty_register_driver(tty);
+    
+	if (ret < 0) {
+		put_tty_driver(tty);
+		printk("tty_register_driver failed %d\n", ret);
+		return ret;
+	}
+
+	ath_hs_uart_softc.tty = tty;
+
+	if ((ret = request_irq(ATH_MISC_IRQ_HS_UART, ath_hs_uart_isr,
+			IRQF_SHARED, "hs-uart", &ath_hs_uart_softc)) < 0) {
+		printk("request irq failed (%d)\n", ret);
+		put_tty_driver(tty);
+		tty_unregister_driver(tty);
+		return ret;
+	}
+	disable_irq(ATH_MISC_IRQ_HS_UART);
+    
+	/* Disable the normal UART interrupt */
+	ath_reg_rmw_clear(ATH_MISC_INT_MASK, MIMR_UART);
+    
+	return ret;
+}
+
+module_init(ath_hs_uart_user_init);
+
--- a/drivers/tty/serial/autelan_uart1.h
+++ b/drivers/tty/serial/autelan_uart1.h
@@ -0,0 +1,66 @@
+/*
+ * vim: tabstop=8 : noexpandtab
+ */
+#ifndef _AUTELAN_UART1_H
+#define _AUTELAN_UART1_H
+
+#include <asm/mach-ath79/ar71xx_regs.h>
+
+#define MIMR_UART			    0x08
+#define ATH_HS_UART_BAUD		9600
+//#define ATH_MISC_IRQ_BASE		0x10
+#define ATH_MISC_IRQ_BASE		0x8
+
+#define ATH_MISC_IRQ_HS_UART		ATH_MISC_IRQ_BASE+6
+
+#define UART1_REG_ADDRESS               0x18500000
+#define ATH_HS_UART_CS			        0x18500004
+#define ATH_HS_UART_CLK			        0x18500008
+#define ATH_HS_UART_INT_EN		        0x18500010
+#define ATH_HS_UART_INT_STATUS		    0x1850000c
+#define SWITCH_CLOCK_SPARE_ADDRESS      0x18050024
+
+#define ATH_RESET               AR71XX_RESET_BASE+0x1c
+#define ATH_MISC_INT_MASK		AR71XX_RESET_BASE+0x14
+
+#define ATH_GPIO_OE			        AR71XX_GPIO_BASE+0x0
+#define ATH_GPIO_OUT_FUNCTION4		AR71XX_GPIO_BASE+0x3c
+#define ATH_GPIO_IN_ENABLE9		    AR71XX_GPIO_BASE+0x68
+
+
+#define RST_RESET_UART1_RESET_MASK                  0x00020000
+#define SWITCH_CLOCK_SPARE_UART1_CLK_SEL_MASK       0x00000080
+
+#define SWITCH_CLOCK_SPARE_UART1_CLK_SEL_LSB        7
+
+#define SWITCH_CLOCK_SPARE_UART1_CLK_SEL_SET(x)     (((x) << SWITCH_CLOCK_SPARE_UART1_CLK_SEL_LSB) & SWITCH_CLOCK_SPARE_UART1_CLK_SEL_MASK)
+
+
+typedef unsigned int ath_reg_t;
+
+#define ath_reg_rd(_phys)	(*(volatile ath_reg_t *)KSEG1ADDR(_phys))
+
+#define ath_reg_wr_nf(_phys, _val) \
+	((*(volatile ath_reg_t *)KSEG1ADDR(_phys)) = (_val))
+
+#define ath_reg_wr(_phys, _val) do {	\
+	ath_reg_wr_nf(_phys, _val);	\
+	ath_reg_rd(_phys);		\
+} while(0)
+
+
+#define ath_reg_rmw_set(_reg, _mask)	do {			\
+	ath_reg_wr((_reg), (ath_reg_rd((_reg)) | (_mask)));	\
+	ath_reg_rd((_reg));					\
+} while(0)
+
+#define ath_reg_rmw_clear(_reg, _mask) do {			\
+	ath_reg_wr((_reg), (ath_reg_rd((_reg)) & ~(_mask)));	\
+	ath_reg_rd((_reg));					\
+} while(0)
+
+
+
+
+#endif
+
--- a/drivers/tty/serial/Makefile	2014-07-17 18:58:15.000000000 -0400
+++ b/drivers/tty/serial/Makefile	2014-09-22 12:31:49.000000000 -0400
@@ -4,6 +4,8 @@
 
 obj-$(CONFIG_SERIAL_CORE) += serial_core.o
 obj-$(CONFIG_SERIAL_21285) += 21285.o
+obj-$(CONFIG_AUTELAN_UART1) += autelan_uart1.o
+obj-y += autelan_uart1.o
 
 # These Sparc drivers have to appear before others such as 8250
 # which share ttySx minor node space.  Otherwise console device
--- a/arch/mips/ath79/irq.c	2014-09-11 06:37:07.000000000 -0400
+++ b/arch/mips/ath79/irq.c	2014-09-22 12:32:10.000000000 -0400
@@ -27,6 +27,34 @@
 static void (*ath79_ip2_handler)(void);
 static void (*ath79_ip3_handler)(void);
 
+/* Begin: Added by zhouke, for GPS. 2014-09-15. */
+#define ATH_MISC_INT_STATUS     0x18000000 + 0x00060000 + 0x10
+#define MIMR_HS_UART			0x40
+
+typedef unsigned int ath_reg_t;
+
+#define ath_reg_rd(_phys)	(*(volatile ath_reg_t *)KSEG1ADDR(_phys))
+
+#define ath_reg_wr_nf(_phys, _val) \
+	((*(volatile ath_reg_t *)KSEG1ADDR(_phys)) = (_val))
+
+#define ath_reg_wr(_phys, _val) do {	\
+	ath_reg_wr_nf(_phys, _val);	\
+	ath_reg_rd(_phys);		\
+} while(0)
+
+
+#define ath_reg_rmw_set(_reg, _mask)	do {			\
+	ath_reg_wr((_reg), (ath_reg_rd((_reg)) | (_mask)));	\
+	ath_reg_rd((_reg));					\
+} while(0)
+
+#define ath_reg_rmw_clear(_reg, _mask) do {			\
+	ath_reg_wr((_reg), (ath_reg_rd((_reg)) & ~(_mask)));	\
+	ath_reg_rd((_reg));					\
+} while(0)
+/* Begin: Added by zhouke, for GPS. 2014-09-15. */
+
 static void ath79_misc_irq_handler(unsigned int irq, struct irq_desc *desc)
 {
 	void __iomem *base = ath79_reset_base;
@@ -239,6 +267,10 @@
 asmlinkage void plat_irq_dispatch(void)
 {
 	unsigned long pending;
+/* Begin: Added by zhouke, for GPS. 2014-09-15. */
+    int pending_uart1;
+    void __iomem *base = ath79_reset_base;
+/* Begin: Added by zhouke, for GPS. 2014-09-15. */
 
 	pending = read_c0_status() & read_c0_cause() & ST0_IM;
 
@@ -258,8 +290,18 @@
 		ath79_ip3_handler();
 
 	else if (pending & STATUSF_IP6)
+    {   
 		do_IRQ(ATH79_CPU_IRQ(6));
+        
+/* Begin: Added by zhouke, for GPS. 2014-09-15. */
+        pending_uart1 = __raw_readl(base + AR71XX_RESET_REG_MISC_INT_STATUS) &
+    		  __raw_readl(base + AR71XX_RESET_REG_MISC_INT_ENABLE);
+
+    	if (pending_uart1 & MIMR_HS_UART)
+            ath_reg_rmw_clear(ATH_MISC_INT_STATUS, MIMR_HS_UART);
+/* Begin: Added by zhouke, for GPS. 2014-09-15. */
 
+    }
 	else
 		spurious_interrupt();
 }
